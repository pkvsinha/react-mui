const fs = require('fs');
const path = require('path');
const yaml = require('js-yaml'); // <-- Add this line

// --- Helper Functions (no changes needed) ---
const get = (obj, path) => path.split('.').reduce((r, k) => r?.[k], obj);
const mergeDeep = (target, ...sources) => {
    for (const source of sources) {
        for (const key in source) {
            if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
                if (!target[key]) Object.assign(target, { [key]: {} });
                mergeDeep(target[key], source[key]);
            } else {
                Object.assign(target, { [key]: source[key] });
            }
        }
    }
    return target;
};

// --- Core Logic (no changes needed) ---
function generateCssBlock(selector, tokens, coreTokens) {
    let cssString = `${selector} {\n`;

    function recursiveResolve(obj, pathPrefix = '') {
        for (const key in obj) {
            const newPath = pathPrefix ? `${pathPrefix}-${key}` : key;
            if (typeof obj[key] === 'object' && obj[key] !== null && 'value' in obj[key]) {
                let { value } = obj[key];
                if (typeof value === 'string' && value.startsWith('{') && value.endsWith('}')) {
                    const refPath = value.slice(1, -1);
                    const resolvedValue = get(coreTokens, refPath)?.value || get(tokens, refPath)?.value;
                    if (!resolvedValue) {
                        console.error(`Error: Token reference "${refPath}" not found.`);
                        continue;
                    }
                    value = resolvedValue;
                }
                cssString += `  --${newPath}: ${value};\n`;
            } else if (typeof obj[key] === 'object') {
                recursiveResolve(obj[key], newPath);
            }
        }
    }

    recursiveResolve(tokens);
    cssString += '}\n';
    return cssString;
}

// --- Main Build Function ---
function buildTokens() {
    console.log('Building advanced design tokens from YAML...');
    const themeName = process.argv[2] || 'default';
    console.log(`Selected theme: ${themeName}`);

    // 1. Load all base token files using the YAML parser
    const coreTokens = yaml.load(fs.readFileSync(path.resolve(__dirname, '../tokens/core/color.yaml'), 'utf-8'));
    const semanticTokens = yaml.load(fs.readFileSync(path.resolve(__dirname, '../tokens/semantic/color.yaml'), 'utf-8'));

    // 2. Load the specified theme file
    const themePath = path.resolve(__dirname, `../tokens/themes/${themeName}.yaml`);
    const themeTokens = fs.existsSync(themePath) ? yaml.load(fs.readFileSync(themePath, 'utf-8')) : {};
    
    // --- The rest of the script is exactly the same ---

    // 3. Define token sets for each mode/contrast
    const baseLightTokens = mergeDeep({}, semanticTokens, themeTokens.modes?.light);
    const baseDarkTokens = mergeDeep({}, baseLightTokens, themeTokens.modes?.dark);
    const highContrastLightTokens = mergeDeep({}, baseLightTokens, themeTokens.contrast?.high?.light);
    const highContrastDarkTokens = mergeDeep({}, baseDarkTokens, themeTokens.contrast?.high?.dark);

    // 4. Generate CSS blocks for each scope
    let finalCss = "/* Generated by build-tokens.js from YAML */\n\n";

    finalCss += generateCssBlock(':root, [data-theme="light"]', baseLightTokens, coreTokens);
    finalCss += `@media (prefers-color-scheme: dark) {\n`;
    finalCss += generateCssBlock(':root, [data-theme="light"]', baseDarkTokens, coreTokens);
    finalCss += `}\n`;
    finalCss += generateCssBlock('[data-theme="dark"]', baseDarkTokens, coreTokens);
    finalCss += `@media (prefers-contrast: more) {\n`;
    finalCss += generateCssBlock(':root, [data-theme="light"][data-contrast="high"]', highContrastLightTokens, coreTokens);
    finalCss += `}\n`;
    finalCss += generateCssBlock('[data-contrast="high"]', highContrastLightTokens, coreTokens);
    finalCss += `@media (prefers-color-scheme: dark) {\n`;
    finalCss += `  @media (prefers-contrast: more) {\n`;
    finalCss += generateCssBlock(':root, [data-theme="dark"][data-contrast="high"]', highContrastDarkTokens, coreTokens);
    finalCss += `  }\n`;
    finalCss += `}\n`;
    finalCss += generateCssBlock('[data-theme="dark"][data-contrast="high"]', highContrastDarkTokens, coreTokens);

    // 5. Write the final CSS file
    const outputPath = path.resolve(__dirname, '../src/styles/');
    if (!fs.existsSync(outputPath)) fs.mkdirSync(outputPath);
    fs.writeFileSync(path.join(outputPath, 'tokens.css'), finalCss);
    
    console.log('âœ… Advanced design tokens built successfully!');
}

buildTokens();